// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    username      String?   @unique
    nickname      String?
    theme         String?

  messages      Message[]
  conversations ConversationUser[]
}

model Conversation {
  id                String             @id @default(cuid())
  lastMessageId     String?            @unique
  createdAt         DateTime           @default(now())
  // title String?
  messages          Message[]
  lastMessage       Message?           @relation("lastMessage", fields: [lastMessageId], references: [id])
  conversationUsers ConversationUser[]

  @@index([lastMessageId])
}

model Message {
  id             String   @id @default(cuid())
  messageText    String
  userId         String
  conversationId String
  createdAt      DateTime @default(now())

  user                      User          @relation(fields: [userId], references: [id])
  conversation              Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  lastMessageOfConversation Conversation? @relation("lastMessage")
  crazy         Boolean?

  @@index([conversationId])
}

model ConversationUser {
  userId         String
  conversationId String
  createdAt      DateTime     @default(now())
  // lastRead DateTime?
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
