import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { FormEvent, useRef, useState } from "react";
import Button from "~/components/Button";

import { api } from "~/utils/api";

export default function Home() {
  return (
    <>
      <Head>
        <title>DL Chat app</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Domagoj <span className="text-[hsl(280,100%,70%)]">Chat App</span>{" "}
            Demo
          </h1>

          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const nameRef = useRef(null);
  const usernameRef = useRef(null);
  const [dummyName, setDummyName] = useState<string>("");
  const [dummyUserame, setDummyUserame] = useState<string>("");

  const createUserMutation = api.user.create.useMutation();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (dummyName === "" || dummyUserame === "") {
      alert("Dummy user must have a name and username");
    }

    try {
      createUserMutation.mutate(
        {
          name: dummyName,
          username: dummyUserame,
        },
        {
          onSuccess: () => {
            setDummyName("");
            setDummyUserame("");
            alert("Dummy user successfully created!");
          },
        },
      );
    } catch (e) {
      alert(e);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData ? (
          <div className="flex max-w-sm flex-wrap justify-center gap-4">
            <span className="text-white">
              Logged in as {sessionData.user?.name} a.k.a.{" "}
              {sessionData.user.username}
            </span>
            <p className="text-center text-xl text-white">
              This app has two dummy users provided for you to use and test out
              the app
            </p>
          </div>
        ) : (
          <span className="text-white">
            Sign in wih name and username to use the app
          </span>
        )}
      </p>
      {!sessionData && (
        <button
          className="rounded-md bg-secondaryBackground px-3 py-3 font-semibold text-primaryText transition hover:bg-primaryHover hover:text-secondaryText"
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {"Sign in"}
        </button>
      )}

      {sessionData && (
        <>
          <button
            className="rounded-md bg-secondaryBackground px-3 py-3 font-semibold text-primaryText transition hover:bg-primaryHover hover:text-secondaryText"
            onClick={() => router.push("/dashboard")}
          >
            Go to Home Page
          </button>
          <div className="mt-7 flex max-w-sm flex-wrap justify-center gap-10">
            <p className="text-center text-lg text-white">
              You can also create your own dummy user here and start a chat
            </p>
          </div>
          <div className="flex flex-col">
            <div className="flex flex-col gap-4">
              <form
                className="mx-auto flex max-w-7xl flex-col items-center justify-center gap-3"
                onSubmit={handleSubmit}
              >
                <label
                  htmlFor="text"
                  className="text-md block font-medium leading-6 text-white"
                >
                  Dummy Name
                </label>

                <input
                  type="text"
                  value={dummyName}
                  ref={nameRef}
                  onChange={(e) => setDummyName(e.target.value)}
                  className="block w-52 rounded-md border-0 p-1.5 text-primaryText shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primaryText sm:text-sm sm:leading-6"
                  placeholder="Enter Name or Username"
                />

                <label
                  htmlFor="text"
                  className="text-md block font-medium leading-6 text-white"
                >
                  Dummy Username
                </label>

                <input
                  type="text"
                  value={dummyUserame}
                  ref={usernameRef}
                  onChange={(e) => setDummyUserame(e.target.value)}
                  className="block w-full rounded-md border-0 p-1.5 text-primaryText shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primaryText sm:text-sm sm:leading-6"
                  placeholder="Enter Name or Username"
                />
              </form>
              <div className="mx-auto">
                <Button title="Add User" />
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
