import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import ChatInput from "~/components/ChatInput";
import Messages from "~/components/Messages";
import { createTRPCContext } from "~/server/api/trpc";
import { api } from "~/utils/api";

interface PageProps {
  params: {
    chatId: string;
  };
}

const Chat = ({ params }: PageProps) => {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const utils = api.useUtils();

  const [countdown, setCountdown] = useState<number | null>(null);
  const [countdownUrl, setCountdownUrl] = useState<string | null>(null);

  api.chat.onCountdown.useSubscription(undefined, {
    onData: (data) => {
      setCountdown(data.countdownTime);
      setCountdownUrl(data.countdownUrl);
    },
  });

  useEffect(() => {
    let countdownInterval: NodeJS.Timeout;

    if (countdown !== null && countdown > 0) {
      countdownInterval = setInterval(() => {
        setCountdown((prevCountdown) => {
          if (prevCountdown && prevCountdown > 0) {
            return prevCountdown - 1;
          }
          return prevCountdown;
        });
      }, 1000);
    }

    if (countdown === 0 && countdownUrl) {
      // Open the URL when countdown is complete
      router.push(countdownUrl);

      setCountdown(null); // Reset countdown
      setCountdownUrl(null); // Reset URL
    }

    return () => {
      if (countdownInterval) {
        clearInterval(countdownInterval);
      }
    };
  }, [countdown, countdownUrl]);

  const conversationId = router.query.chatId as string;
  const {
    data: messages,
    // isLoading: loadingMessages,
    error: errorFetchingMessages,
    refetch: refetchMessages,
  } = api.chat.messages.useQuery(
    { conversationId },
    {
      enabled: !!conversationId,
    },
  );

  const {
    data: chatPartner,
    // isLoading: loadingChatPartner,
    error: errorFetchingChatPartner,
    refetch: refetchChatPartner,
  } = api.chat.getChatPartner.useQuery(
    { conversationId },
    { enabled: !!conversationId },
  );

  //   if (loadingConversationId || loadingMessages) {
  //     return <div>Loading...</div>;
  //   }

  api.chat.onSendMessage.useSubscription(undefined, {
    onData: (data) => {
      const isMessageFromOtherUser = refetchMessages();
      const notification = new Audio("/audio/tap-notification.mp3");
      notification.play();
    },
  });

  api.user.onChangeUserNickname.useSubscription(undefined, {
    onData: () => {
      refetchChatPartner();
    },
  });

  api.chat.onDelete.useSubscription(undefined, {
    onData: () => {
      refetchMessages();
    },
  });

  if (
    errorFetchingChatPartner ||
    errorFetchingMessages ||
    !conversationId ||
    !messages
  ) {
    return <div>Error loading conversation</div>;
  }
  return (
    <>
      <Head>
        <title>
          {chatPartner && chatPartner.nickname
            ? chatPartner.nickname
            : "DL Chat App"}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {chatPartner && conversationId && (
        <div className="flex h-full max-h-[calc(100vh-4rem)] flex-1 flex-col justify-between">
          {/* Countdown display */}
          {countdown !== null && countdown > 0 && (
            <div className="py-2 text-center text-lg text-red-600">
              Countdown: {countdown} seconds
            </div>
          )}
          <div className="flex justify-between border-b-2 border-secondaryBackground py-3 sm:items-center">
            <div className="relative flex items-center space-x-4">
              <div className="relative"></div>
              <div className="flex flex-col leading-tight">
                <div className="flex items-center text-xl">
                  <span className="mr-3 font-semibold text-primaryText">
                    {chatPartner.name}
                  </span>
                </div>
                <span className="text-sm text-primaryText">
                  {`nickname: ${chatPartner.nickname}`}
                </span>
              </div>
            </div>
          </div>

          <Messages messages={messages} currentUserId={sessionData?.user.id} />
          <ChatInput
            chatPartner={chatPartner}
            conversationId={conversationId}
            handleRefetchMessages={refetchMessages}
            lastMessage={
              messages.filter(
                (message) => message.userId === sessionData?.user.id,
              )[0]
            }
          />
        </div>
      )}
    </>
  );
};

export default Chat;
